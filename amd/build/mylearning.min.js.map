{"version":3,"file":"mylearning.min.js","sources":["../src/mylearning.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the mylearning popover in the nav bar.\n *\n * See template: local_course/mylearning\n *\n * @copyright   2023 Willian Mano {@link https://conecti.me}\n * @author      Willian Mano <willianmanoaraujo@gmail.com>\n */\ndefine(['jquery', 'core/ajax', 'core/templates', 'core/str', 'core/url',\n            'core/notification', 'core/custom_interaction_events', 'core/popover_region_controller'],\n        function($, Ajax, Templates, Str, URL, DebugNotification, CustomEvents,\n            PopoverController) {\n\n    var SELECTORS = {\n        ALL_LEARNING_CONTAINER: '[data-region=\"all-learning\"]',\n        NOTIFICATION: '[data-region=\"mylearning-content-item-container\"]',\n        NOTIFICATION_LINK: '[data-action=\"content-item-link\"]',\n    };\n\n    /**\n     * Constructor for the MyLearningPopoverController.\n     * Extends PopoverRegionController.\n     *\n     * @param {object} element jQuery object root element of the popover\n     */\n    var MyLearningPopoverController = function(element) {\n        // Initialise base class.\n        PopoverController.call(this, element);\n\n        this.contextid = this.root.attr('data-contextid');\n        this.container = this.root.find(SELECTORS.ALL_LEARNING_CONTAINER);\n        this.loadedAll = false;\n    };\n\n    /**\n     * Clone the parent prototype.\n     */\n    MyLearningPopoverController.prototype = Object.create(PopoverController.prototype);\n\n    /**\n     * Make sure the constructor is set correctly.\n     */\n    MyLearningPopoverController.prototype.constructor = MyLearningPopoverController;\n\n    /**\n     * Set the correct aria label on the menu toggle button to be read out by screen\n     * readers. The message will indicate the state of the unread notifications.\n     *\n     * @method updateButtonAriaLabel\n     */\n    MyLearningPopoverController.prototype.updateButtonAriaLabel = function() {\n        if (this.isMenuOpen()) {\n            Str.get_string('hidenotificationwindow', 'message').done(function(string) {\n                this.menuToggle.attr('aria-label', string);\n            }.bind(this));\n        } else {\n            if (this.unreadCount) {\n                Str.get_string('shownotificationwindowwithcount', 'message', this.unreadCount).done(function(string) {\n                    this.menuToggle.attr('aria-label', string);\n                }.bind(this));\n            } else {\n                Str.get_string('shownotificationwindownonew', 'message').done(function(string) {\n                    this.menuToggle.attr('aria-label', string);\n                }.bind(this));\n            }\n        }\n    };\n\n    /**\n     * Return the jQuery element with the content. This will return either\n     * the unread notification container or the all notification container\n     * depending on which is currently visible.\n     *\n     * @method getContent\n     * @return {object} jQuery object currently visible content contianer\n     */\n    MyLearningPopoverController.prototype.getContent = function() {\n        return this.container;\n    };\n\n    /**\n     * Check if we've loaded all of the notifications for the current popover\n     * state.\n     *\n     * @method hasLoadedAllContent\n     * @return {bool} true if all notifications loaded, false otherwise\n     */\n    MyLearningPopoverController.prototype.hasLoadedAllContent = function() {\n        return this.loadedAll;\n    };\n\n    /**\n     * Set the state of the loaded all content property for the current state\n     * of the popover.\n     *\n     * @method setLoadedAllContent\n     * @param {bool} val True if all content is loaded, false otherwise\n     */\n    MyLearningPopoverController.prototype.setLoadedAllContent = function(val) {\n        this.loadedAll = val;\n    };\n\n    /**\n     * Send a request for more notifications from the server, if we aren't already\n     * loading some and haven't already loaded all of them.\n     *\n     * Takes into account the current mode of the popover and will request only\n     * unread notifications if required.\n     *\n     * All notifications are marked as read by the server when they are returned.\n     *\n     * @method loadMoreNotifications\n     * @return {object} jQuery promise that is resolved when notifications have been\n     *                        retrieved and added to the DOM\n     */\n    MyLearningPopoverController.prototype.loadMyLearning = function() {\n        if (this.isLoading || this.hasLoadedAllContent()) {\n            return $.Deferred().resolve();\n        }\n\n        this.startLoading();\n\n        var container = this.getContent();\n\n        var request = Ajax.call([{\n            methodname: 'local_course_get_my_learning',\n            args: {\n                contextid: this.contextid\n            }\n        }]);\n\n        request[0].done(function(response) {\n            this.setLoadedAllContent(true);\n\n            return this.renderMyLearning(JSON.parse(response.courses), container);\n        }.bind(this)).fail(function() {\n            //console.log('error');\n        }.bind(this)).always(function() {\n            this.stopLoading();\n        }.bind(this));\n    };\n\n    /**\n     * Render the notification data with the appropriate template and add it to the DOM.\n     *\n     * @method renderNotifications\n     * @param {array} courses Course data\n     * @param {object} container jQuery object the container to append the rendered notifications\n     * @return {object} jQuery promise that is resolved when all notifications have been\n     *                  rendered and added to the DOM\n     */\n    MyLearningPopoverController.prototype.renderMyLearning = function(courses, container) {\n        var promises = [];\n\n        $.each(courses, function(index, course) {\n            var promise = Templates.render('local_course/mylearning_course', course)\n                .then(function(html, js) {\n                    return {html: html, js: js};\n                });\n            promises.push(promise);\n        }.bind(this));\n\n        return $.when.apply($, promises).then(function() {\n            // Each of the promises in the when will pass its results as an argument to the function.\n            // The order of the arguments will be the order that the promises are passed to when()\n            // i.e. the first promise's results will be in the first argument.\n            $.each(arguments, function(index, argument) {\n                container.append(argument.html);\n                Templates.runTemplateJS(argument.js);\n            });\n            return;\n        });\n    };\n\n    /**\n     * Add all of the required event listeners for this notification popover.\n     *\n     * @method registerEventListeners\n     */\n    MyLearningPopoverController.prototype.registerEventListeners = function() {\n        CustomEvents.define(this.root, [\n            CustomEvents.events.activate,\n        ]);\n\n        // Update the notification information when the menu is opened.\n        this.root.on(this.events().menuOpened, function() {\n            this.updateButtonAriaLabel();\n\n            if (!this.hasLoadedAllContent()) {\n                this.loadMyLearning();\n            }\n        }.bind(this));\n\n        // Update the unread notification count when the menu is closed.\n        this.root.on(this.events().menuClosed, function() {\n            this.updateButtonAriaLabel();\n        }.bind(this));\n\n        // Set aria attributes when popover is loading.\n        this.root.on(this.events().startLoading, function() {\n            this.getContent().attr('aria-busy', 'true');\n        }.bind(this));\n\n        // Set aria attributes when popover is finished loading.\n        this.root.on(this.events().stopLoading, function() {\n            this.getContent().attr('aria-busy', 'false');\n        }.bind(this));\n    };\n\n    return MyLearningPopoverController;\n});\n"],"names":["define","$","Ajax","Templates","Str","URL","DebugNotification","CustomEvents","PopoverController","SELECTORS","MyLearningPopoverController","element","call","this","contextid","root","attr","container","find","loadedAll","prototype","Object","create","constructor","updateButtonAriaLabel","isMenuOpen","get_string","done","string","menuToggle","bind","unreadCount","getContent","hasLoadedAllContent","setLoadedAllContent","val","loadMyLearning","isLoading","Deferred","resolve","startLoading","methodname","args","response","renderMyLearning","JSON","parse","courses","fail","always","stopLoading","promises","each","index","course","promise","render","then","html","js","push","when","apply","arguments","argument","append","runTemplateJS","registerEventListeners","events","activate","on","menuOpened","menuClosed"],"mappings":"AAuBAA,iCAAO,CAAC,SAAU,YAAa,iBAAkB,WAAY,WACjD,oBAAqB,iCAAkC,mCAC3D,SAASC,EAAGC,KAAMC,UAAWC,IAAKC,IAAKC,kBAAmBC,aACtDC,uBAEJC,iCACwB,+BAWxBC,4BAA8B,SAASC,SAEvCH,kBAAkBI,KAAKC,KAAMF,cAExBG,UAAYD,KAAKE,KAAKC,KAAK,uBAC3BC,UAAYJ,KAAKE,KAAKG,KAAKT,uCAC3BU,WAAY,UAMrBT,4BAA4BU,UAAYC,OAAOC,OAAOd,kBAAkBY,YAKlCG,YAAcb,4BAQpDA,4BAA4BU,UAAUI,sBAAwB,WACtDX,KAAKY,aACLrB,IAAIsB,WAAW,yBAA0B,WAAWC,KAAK,SAASC,aACzDC,WAAWb,KAAK,aAAcY,SACrCE,KAAKjB,OAEHA,KAAKkB,YACL3B,IAAIsB,WAAW,kCAAmC,UAAWb,KAAKkB,aAAaJ,KAAK,SAASC,aACpFC,WAAWb,KAAK,aAAcY,SACrCE,KAAKjB,OAEPT,IAAIsB,WAAW,8BAA+B,WAAWC,KAAK,SAASC,aAC9DC,WAAWb,KAAK,aAAcY,SACrCE,KAAKjB,QAanBH,4BAA4BU,UAAUY,WAAa,kBACxCnB,KAAKI,WAUhBP,4BAA4BU,UAAUa,oBAAsB,kBACjDpB,KAAKM,WAUhBT,4BAA4BU,UAAUc,oBAAsB,SAASC,UAC5DhB,UAAYgB,KAgBrBzB,4BAA4BU,UAAUgB,eAAiB,cAC/CvB,KAAKwB,WAAaxB,KAAKoB,6BAChBhC,EAAEqC,WAAWC,eAGnBC,mBAEDvB,UAAYJ,KAAKmB,aAEP9B,KAAKU,KAAK,CAAC,CACrB6B,WAAY,+BACZC,KAAM,CACF5B,UAAWD,KAAKC,cAIhB,GAAGa,KAAK,SAASgB,sBAChBT,qBAAoB,GAElBrB,KAAK+B,iBAAiBC,KAAKC,MAAMH,SAASI,SAAU9B,YAC7Da,KAAKjB,OAAOmC,KAAK,aAEjBlB,KAAKjB,OAAOoC,OAAO,gBACZC,eACPpB,KAAKjB,QAYXH,4BAA4BU,UAAUwB,iBAAmB,SAASG,QAAS9B,eACnEkC,SAAW,UAEflD,EAAEmD,KAAKL,QAAS,SAASM,MAAOC,YACxBC,QAAUpD,UAAUqD,OAAO,iCAAkCF,QAC5DG,MAAK,SAASC,KAAMC,UACV,CAACD,KAAMA,KAAMC,GAAIA,OAEhCR,SAASS,KAAKL,UAChBzB,KAAKjB,OAEAZ,EAAE4D,KAAKC,MAAM7D,EAAGkD,UAAUM,MAAK,WAIlCxD,EAAEmD,KAAKW,WAAW,SAASV,MAAOW,UAC9B/C,UAAUgD,OAAOD,SAASN,MAC1BvD,UAAU+D,cAAcF,SAASL,WAW7CjD,4BAA4BU,UAAU+C,uBAAyB,WAC3D5D,aAAaP,OAAOa,KAAKE,KAAM,CAC3BR,aAAa6D,OAAOC,gBAInBtD,KAAKuD,GAAGzD,KAAKuD,SAASG,WAAY,gBAC9B/C,wBAEAX,KAAKoB,4BACDG,kBAEXN,KAAKjB,YAGFE,KAAKuD,GAAGzD,KAAKuD,SAASI,WAAY,gBAC9BhD,yBACPM,KAAKjB,YAGFE,KAAKuD,GAAGzD,KAAKuD,SAAS5B,aAAc,gBAChCR,aAAahB,KAAK,YAAa,SACtCc,KAAKjB,YAGFE,KAAKuD,GAAGzD,KAAKuD,SAASlB,YAAa,gBAC/BlB,aAAahB,KAAK,YAAa,UACtCc,KAAKjB,QAGJH"}